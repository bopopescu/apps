/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Blas_queu_searc_reque_lite_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'blast.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_BLAST_BLAS_QUEU_SEARC_REQUE_LITE_BASE_HPP
#define OBJECTS_BLAST_BLAS_QUEU_SEARC_REQUE_LITE_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CBlast4_options_lite;


// generated classes

/////////////////////////////////////////////////////////////////////////////
/// Simplified search submission structure
class NCBI_BLAST_EXPORT CBlast4_queue_search_request_lite_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CBlast4_queue_search_request_lite_Base(void);
    // destructor
    virtual ~CBlast4_queue_search_request_lite_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef string TQuery;
    typedef string TDatabase_name;
    typedef CBlast4_options_lite TOptions;

    // getters
    // setters

    /// query sequence: provide a FASTA sequence, a gi number, or an accession
    /// mandatory
    /// typedef string TQuery
    ///  Check whether the Query data member has been assigned a value.
    bool IsSetQuery(void) const;
    /// Check whether it is safe or not to call GetQuery method.
    bool CanGetQuery(void) const;
    void ResetQuery(void);
    const TQuery& GetQuery(void) const;
    void SetQuery(const TQuery& value);
    TQuery& SetQuery(void);

    /// Name of BLAST database to search
    /// mandatory
    /// typedef string TDatabase_name
    ///  Check whether the Database_name data member has been assigned a value.
    bool IsSetDatabase_name(void) const;
    /// Check whether it is safe or not to call GetDatabase_name method.
    bool CanGetDatabase_name(void) const;
    void ResetDatabase_name(void);
    const TDatabase_name& GetDatabase_name(void) const;
    void SetDatabase_name(const TDatabase_name& value);
    TDatabase_name& SetDatabase_name(void);

    /// BLAST options
    /// mandatory
    /// typedef CBlast4_options_lite TOptions
    ///  Check whether the Options data member has been assigned a value.
    bool IsSetOptions(void) const;
    /// Check whether it is safe or not to call GetOptions method.
    bool CanGetOptions(void) const;
    void ResetOptions(void);
    const TOptions& GetOptions(void) const;
    void SetOptions(TOptions& value);
    TOptions& SetOptions(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBlast4_queue_search_request_lite_Base(const CBlast4_queue_search_request_lite_Base&);
    CBlast4_queue_search_request_lite_Base& operator=(const CBlast4_queue_search_request_lite_Base&);

    // data
    Uint4 m_set_State[1];
    string m_Query;
    string m_Database_name;
    CRef< TOptions > m_Options;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CBlast4_queue_search_request_lite_Base::IsSetQuery(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBlast4_queue_search_request_lite_Base::CanGetQuery(void) const
{
    return IsSetQuery();
}

inline
const CBlast4_queue_search_request_lite_Base::TQuery& CBlast4_queue_search_request_lite_Base::GetQuery(void) const
{
    if (!CanGetQuery()) {
        ThrowUnassigned(0);
    }
    return m_Query;
}

inline
void CBlast4_queue_search_request_lite_Base::SetQuery(const CBlast4_queue_search_request_lite_Base::TQuery& value)
{
    m_Query = value;
    m_set_State[0] |= 0x3;
}

inline
CBlast4_queue_search_request_lite_Base::TQuery& CBlast4_queue_search_request_lite_Base::SetQuery(void)
{
#ifdef _DEBUG
    if (!IsSetQuery()) {
        m_Query = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Query;
}

inline
bool CBlast4_queue_search_request_lite_Base::IsSetDatabase_name(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBlast4_queue_search_request_lite_Base::CanGetDatabase_name(void) const
{
    return IsSetDatabase_name();
}

inline
const CBlast4_queue_search_request_lite_Base::TDatabase_name& CBlast4_queue_search_request_lite_Base::GetDatabase_name(void) const
{
    if (!CanGetDatabase_name()) {
        ThrowUnassigned(1);
    }
    return m_Database_name;
}

inline
void CBlast4_queue_search_request_lite_Base::SetDatabase_name(const CBlast4_queue_search_request_lite_Base::TDatabase_name& value)
{
    m_Database_name = value;
    m_set_State[0] |= 0xc;
}

inline
CBlast4_queue_search_request_lite_Base::TDatabase_name& CBlast4_queue_search_request_lite_Base::SetDatabase_name(void)
{
#ifdef _DEBUG
    if (!IsSetDatabase_name()) {
        m_Database_name = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Database_name;
}

inline
bool CBlast4_queue_search_request_lite_Base::IsSetOptions(void) const
{
    return m_Options.NotEmpty();
}

inline
bool CBlast4_queue_search_request_lite_Base::CanGetOptions(void) const
{
    return true;
}

inline
const CBlast4_queue_search_request_lite_Base::TOptions& CBlast4_queue_search_request_lite_Base::GetOptions(void) const
{
    if ( !m_Options ) {
        const_cast<CBlast4_queue_search_request_lite_Base*>(this)->ResetOptions();
    }
    return (*m_Options);
}

inline
CBlast4_queue_search_request_lite_Base::TOptions& CBlast4_queue_search_request_lite_Base::SetOptions(void)
{
    if ( !m_Options ) {
        ResetOptions();
    }
    return (*m_Options);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_BLAST_BLAS_QUEU_SEARC_REQUE_LITE_BASE_HPP
