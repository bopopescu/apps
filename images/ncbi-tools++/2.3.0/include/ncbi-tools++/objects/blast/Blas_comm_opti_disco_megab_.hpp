/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Blas_comm_opti_disco_megab_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'blast.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_BLAST_BLAS_COMM_OPTI_DISCO_MEGAB_BASE_HPP
#define OBJECTS_BLAST_BLAS_COMM_OPTI_DISCO_MEGAB_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_BLAST_EXPORT CBlast4_common_options_discontiguous_megablast_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CBlast4_common_options_discontiguous_megablast_Base(void);
    // destructor
    virtual ~CBlast4_common_options_discontiguous_megablast_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef int TTemplate_type;
    typedef int TTemplate_length;

    // getters
    // setters

    /// mandatory
    /// typedef int TTemplate_type
    ///  Check whether the Template_type data member has been assigned a value.
    bool IsSetTemplate_type(void) const;
    /// Check whether it is safe or not to call GetTemplate_type method.
    bool CanGetTemplate_type(void) const;
    void ResetTemplate_type(void);
    TTemplate_type GetTemplate_type(void) const;
    void SetTemplate_type(TTemplate_type value);
    TTemplate_type& SetTemplate_type(void);

    /// mandatory
    /// typedef int TTemplate_length
    ///  Check whether the Template_length data member has been assigned a value.
    bool IsSetTemplate_length(void) const;
    /// Check whether it is safe or not to call GetTemplate_length method.
    bool CanGetTemplate_length(void) const;
    void ResetTemplate_length(void);
    TTemplate_length GetTemplate_length(void) const;
    void SetTemplate_length(TTemplate_length value);
    TTemplate_length& SetTemplate_length(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBlast4_common_options_discontiguous_megablast_Base(const CBlast4_common_options_discontiguous_megablast_Base&);
    CBlast4_common_options_discontiguous_megablast_Base& operator=(const CBlast4_common_options_discontiguous_megablast_Base&);

    // data
    Uint4 m_set_State[1];
    int m_Template_type;
    int m_Template_length;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CBlast4_common_options_discontiguous_megablast_Base::IsSetTemplate_type(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBlast4_common_options_discontiguous_megablast_Base::CanGetTemplate_type(void) const
{
    return IsSetTemplate_type();
}

inline
void CBlast4_common_options_discontiguous_megablast_Base::ResetTemplate_type(void)
{
    m_Template_type = 0;
    m_set_State[0] &= ~0x3;
}

inline
CBlast4_common_options_discontiguous_megablast_Base::TTemplate_type CBlast4_common_options_discontiguous_megablast_Base::GetTemplate_type(void) const
{
    if (!CanGetTemplate_type()) {
        ThrowUnassigned(0);
    }
    return m_Template_type;
}

inline
void CBlast4_common_options_discontiguous_megablast_Base::SetTemplate_type(CBlast4_common_options_discontiguous_megablast_Base::TTemplate_type value)
{
    m_Template_type = value;
    m_set_State[0] |= 0x3;
}

inline
CBlast4_common_options_discontiguous_megablast_Base::TTemplate_type& CBlast4_common_options_discontiguous_megablast_Base::SetTemplate_type(void)
{
#ifdef _DEBUG
    if (!IsSetTemplate_type()) {
        memset(&m_Template_type,UnassignedByte(),sizeof(m_Template_type));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Template_type;
}

inline
bool CBlast4_common_options_discontiguous_megablast_Base::IsSetTemplate_length(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBlast4_common_options_discontiguous_megablast_Base::CanGetTemplate_length(void) const
{
    return IsSetTemplate_length();
}

inline
void CBlast4_common_options_discontiguous_megablast_Base::ResetTemplate_length(void)
{
    m_Template_length = 0;
    m_set_State[0] &= ~0xc;
}

inline
CBlast4_common_options_discontiguous_megablast_Base::TTemplate_length CBlast4_common_options_discontiguous_megablast_Base::GetTemplate_length(void) const
{
    if (!CanGetTemplate_length()) {
        ThrowUnassigned(1);
    }
    return m_Template_length;
}

inline
void CBlast4_common_options_discontiguous_megablast_Base::SetTemplate_length(CBlast4_common_options_discontiguous_megablast_Base::TTemplate_length value)
{
    m_Template_length = value;
    m_set_State[0] |= 0xc;
}

inline
CBlast4_common_options_discontiguous_megablast_Base::TTemplate_length& CBlast4_common_options_discontiguous_megablast_Base::SetTemplate_length(void)
{
#ifdef _DEBUG
    if (!IsSetTemplate_length()) {
        memset(&m_Template_length,UnassignedByte(),sizeof(m_Template_length));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Template_length;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_BLAST_BLAS_COMM_OPTI_DISCO_MEGAB_BASE_HPP
