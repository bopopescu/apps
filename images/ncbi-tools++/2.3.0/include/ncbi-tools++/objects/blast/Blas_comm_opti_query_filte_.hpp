/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Blas_comm_opti_query_filte_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'blast.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_BLAST_BLAS_COMM_OPTI_QUERY_FILTE_BASE_HPP
#define OBJECTS_BLAST_BLAS_COMM_OPTI_QUERY_FILTE_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CBlast4_common_options_repeats_filtering;
class CBlast4_mask;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_BLAST_EXPORT CBlast4_common_options_query_filtering_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CBlast4_common_options_query_filtering_Base(void);
    // destructor
    virtual ~CBlast4_common_options_query_filtering_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef bool TUse_seg_filtering;
    typedef bool TUse_dust_filtering;
    typedef bool TMask_for_lookup_table_only;
    typedef CBlast4_common_options_repeats_filtering TRepeats_filtering;
    typedef list< CRef< CBlast4_mask > > TUser_specified_masks;
    typedef bool TNo_filtering;

    // getters
    // setters

    /// use SEG filtering with default parameters
    /// optional
    /// typedef bool TUse_seg_filtering
    ///  Check whether the Use_seg_filtering data member has been assigned a value.
    bool IsSetUse_seg_filtering(void) const;
    /// Check whether it is safe or not to call GetUse_seg_filtering method.
    bool CanGetUse_seg_filtering(void) const;
    void ResetUse_seg_filtering(void);
    TUse_seg_filtering GetUse_seg_filtering(void) const;
    void SetUse_seg_filtering(TUse_seg_filtering value);
    TUse_seg_filtering& SetUse_seg_filtering(void);

    /// use DUST filtering with default parameters
    /// optional
    /// typedef bool TUse_dust_filtering
    ///  Check whether the Use_dust_filtering data member has been assigned a value.
    bool IsSetUse_dust_filtering(void) const;
    /// Check whether it is safe or not to call GetUse_dust_filtering method.
    bool CanGetUse_dust_filtering(void) const;
    void ResetUse_dust_filtering(void);
    TUse_dust_filtering GetUse_dust_filtering(void) const;
    void SetUse_dust_filtering(TUse_dust_filtering value);
    TUse_dust_filtering& SetUse_dust_filtering(void);

    /// mask for lookup table only (i.e.: soft masking)
    /// optional
    /// typedef bool TMask_for_lookup_table_only
    ///  Check whether the Mask_for_lookup_table_only data member has been assigned a value.
    bool IsSetMask_for_lookup_table_only(void) const;
    /// Check whether it is safe or not to call GetMask_for_lookup_table_only method.
    bool CanGetMask_for_lookup_table_only(void) const;
    void ResetMask_for_lookup_table_only(void);
    TMask_for_lookup_table_only GetMask_for_lookup_table_only(void) const;
    void SetMask_for_lookup_table_only(TMask_for_lookup_table_only value);
    TMask_for_lookup_table_only& SetMask_for_lookup_table_only(void);

    /// optional
    /// typedef CBlast4_common_options_repeats_filtering TRepeats_filtering
    ///  Check whether the Repeats_filtering data member has been assigned a value.
    bool IsSetRepeats_filtering(void) const;
    /// Check whether it is safe or not to call GetRepeats_filtering method.
    bool CanGetRepeats_filtering(void) const;
    void ResetRepeats_filtering(void);
    const TRepeats_filtering& GetRepeats_filtering(void) const;
    void SetRepeats_filtering(TRepeats_filtering& value);
    TRepeats_filtering& SetRepeats_filtering(void);

    /// user specified masking locations
    /// optional
    /// typedef list< CRef< CBlast4_mask > > TUser_specified_masks
    ///  Check whether the User_specified_masks data member has been assigned a value.
    bool IsSetUser_specified_masks(void) const;
    /// Check whether it is safe or not to call GetUser_specified_masks method.
    bool CanGetUser_specified_masks(void) const;
    void ResetUser_specified_masks(void);
    const TUser_specified_masks& GetUser_specified_masks(void) const;
    TUser_specified_masks& SetUser_specified_masks(void);

    /// This overrides all other filtering options
    /// optional
    /// typedef bool TNo_filtering
    ///  Check whether the No_filtering data member has been assigned a value.
    bool IsSetNo_filtering(void) const;
    /// Check whether it is safe or not to call GetNo_filtering method.
    bool CanGetNo_filtering(void) const;
    void ResetNo_filtering(void);
    TNo_filtering GetNo_filtering(void) const;
    void SetNo_filtering(TNo_filtering value);
    TNo_filtering& SetNo_filtering(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CBlast4_common_options_query_filtering_Base(const CBlast4_common_options_query_filtering_Base&);
    CBlast4_common_options_query_filtering_Base& operator=(const CBlast4_common_options_query_filtering_Base&);

    // data
    Uint4 m_set_State[1];
    bool m_Use_seg_filtering;
    bool m_Use_dust_filtering;
    bool m_Mask_for_lookup_table_only;
    CRef< TRepeats_filtering > m_Repeats_filtering;
    list< CRef< CBlast4_mask > > m_User_specified_masks;
    bool m_No_filtering;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CBlast4_common_options_query_filtering_Base::IsSetUse_seg_filtering(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetUse_seg_filtering(void) const
{
    return IsSetUse_seg_filtering();
}

inline
void CBlast4_common_options_query_filtering_Base::ResetUse_seg_filtering(void)
{
    m_Use_seg_filtering = 0;
    m_set_State[0] &= ~0x3;
}

inline
CBlast4_common_options_query_filtering_Base::TUse_seg_filtering CBlast4_common_options_query_filtering_Base::GetUse_seg_filtering(void) const
{
    if (!CanGetUse_seg_filtering()) {
        ThrowUnassigned(0);
    }
    return m_Use_seg_filtering;
}

inline
void CBlast4_common_options_query_filtering_Base::SetUse_seg_filtering(CBlast4_common_options_query_filtering_Base::TUse_seg_filtering value)
{
    m_Use_seg_filtering = value;
    m_set_State[0] |= 0x3;
}

inline
CBlast4_common_options_query_filtering_Base::TUse_seg_filtering& CBlast4_common_options_query_filtering_Base::SetUse_seg_filtering(void)
{
#ifdef _DEBUG
    if (!IsSetUse_seg_filtering()) {
        memset(&m_Use_seg_filtering,UnassignedByte(),sizeof(m_Use_seg_filtering));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Use_seg_filtering;
}

inline
bool CBlast4_common_options_query_filtering_Base::IsSetUse_dust_filtering(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetUse_dust_filtering(void) const
{
    return IsSetUse_dust_filtering();
}

inline
void CBlast4_common_options_query_filtering_Base::ResetUse_dust_filtering(void)
{
    m_Use_dust_filtering = 0;
    m_set_State[0] &= ~0xc;
}

inline
CBlast4_common_options_query_filtering_Base::TUse_dust_filtering CBlast4_common_options_query_filtering_Base::GetUse_dust_filtering(void) const
{
    if (!CanGetUse_dust_filtering()) {
        ThrowUnassigned(1);
    }
    return m_Use_dust_filtering;
}

inline
void CBlast4_common_options_query_filtering_Base::SetUse_dust_filtering(CBlast4_common_options_query_filtering_Base::TUse_dust_filtering value)
{
    m_Use_dust_filtering = value;
    m_set_State[0] |= 0xc;
}

inline
CBlast4_common_options_query_filtering_Base::TUse_dust_filtering& CBlast4_common_options_query_filtering_Base::SetUse_dust_filtering(void)
{
#ifdef _DEBUG
    if (!IsSetUse_dust_filtering()) {
        memset(&m_Use_dust_filtering,UnassignedByte(),sizeof(m_Use_dust_filtering));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Use_dust_filtering;
}

inline
bool CBlast4_common_options_query_filtering_Base::IsSetMask_for_lookup_table_only(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetMask_for_lookup_table_only(void) const
{
    return IsSetMask_for_lookup_table_only();
}

inline
void CBlast4_common_options_query_filtering_Base::ResetMask_for_lookup_table_only(void)
{
    m_Mask_for_lookup_table_only = 0;
    m_set_State[0] &= ~0x30;
}

inline
CBlast4_common_options_query_filtering_Base::TMask_for_lookup_table_only CBlast4_common_options_query_filtering_Base::GetMask_for_lookup_table_only(void) const
{
    if (!CanGetMask_for_lookup_table_only()) {
        ThrowUnassigned(2);
    }
    return m_Mask_for_lookup_table_only;
}

inline
void CBlast4_common_options_query_filtering_Base::SetMask_for_lookup_table_only(CBlast4_common_options_query_filtering_Base::TMask_for_lookup_table_only value)
{
    m_Mask_for_lookup_table_only = value;
    m_set_State[0] |= 0x30;
}

inline
CBlast4_common_options_query_filtering_Base::TMask_for_lookup_table_only& CBlast4_common_options_query_filtering_Base::SetMask_for_lookup_table_only(void)
{
#ifdef _DEBUG
    if (!IsSetMask_for_lookup_table_only()) {
        memset(&m_Mask_for_lookup_table_only,UnassignedByte(),sizeof(m_Mask_for_lookup_table_only));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Mask_for_lookup_table_only;
}

inline
bool CBlast4_common_options_query_filtering_Base::IsSetRepeats_filtering(void) const
{
    return m_Repeats_filtering.NotEmpty();
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetRepeats_filtering(void) const
{
    return IsSetRepeats_filtering();
}

inline
const CBlast4_common_options_query_filtering_Base::TRepeats_filtering& CBlast4_common_options_query_filtering_Base::GetRepeats_filtering(void) const
{
    if (!CanGetRepeats_filtering()) {
        ThrowUnassigned(3);
    }
    return (*m_Repeats_filtering);
}

inline
bool CBlast4_common_options_query_filtering_Base::IsSetUser_specified_masks(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetUser_specified_masks(void) const
{
    return true;
}

inline
const CBlast4_common_options_query_filtering_Base::TUser_specified_masks& CBlast4_common_options_query_filtering_Base::GetUser_specified_masks(void) const
{
    return m_User_specified_masks;
}

inline
CBlast4_common_options_query_filtering_Base::TUser_specified_masks& CBlast4_common_options_query_filtering_Base::SetUser_specified_masks(void)
{
    m_set_State[0] |= 0x100;
    return m_User_specified_masks;
}

inline
bool CBlast4_common_options_query_filtering_Base::IsSetNo_filtering(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CBlast4_common_options_query_filtering_Base::CanGetNo_filtering(void) const
{
    return IsSetNo_filtering();
}

inline
void CBlast4_common_options_query_filtering_Base::ResetNo_filtering(void)
{
    m_No_filtering = 0;
    m_set_State[0] &= ~0xc00;
}

inline
CBlast4_common_options_query_filtering_Base::TNo_filtering CBlast4_common_options_query_filtering_Base::GetNo_filtering(void) const
{
    if (!CanGetNo_filtering()) {
        ThrowUnassigned(5);
    }
    return m_No_filtering;
}

inline
void CBlast4_common_options_query_filtering_Base::SetNo_filtering(CBlast4_common_options_query_filtering_Base::TNo_filtering value)
{
    m_No_filtering = value;
    m_set_State[0] |= 0xc00;
}

inline
CBlast4_common_options_query_filtering_Base::TNo_filtering& CBlast4_common_options_query_filtering_Base::SetNo_filtering(void)
{
#ifdef _DEBUG
    if (!IsSetNo_filtering()) {
        memset(&m_No_filtering,UnassignedByte(),sizeof(m_No_filtering));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_No_filtering;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_BLAST_BLAS_COMM_OPTI_QUERY_FILTE_BASE_HPP
